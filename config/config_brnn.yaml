# Training files
data:
    corpus_1:
        path_src: NMT_en_kin/data/train/train-en.txt
        path_tgt: NMT_en_kin/data/train/train-kin.txt
        transforms: [filtertoolong]
    valid:
        path_src: NMT_en_kin/data/dev/dev-en.txt
        path_tgt: NMT_en_kin/data/dev/dev-kin.txt
        transforms: [filtertoolong]

# Vocabulary files, generated by onmt_build_vocab
src_vocab: NMT_en_kin/data/vocab/onmt/vocab-en.vocab
tgt_vocab: NMT_en_kin/data/vocab/onmt/vocab-kin.vocab

src_vocab_size: 50000
tgt_vocab_size: 50000

# Filter out source/target longer than n if [filtertoolong] enabled
src_seq_length: 150
src_seq_length: 150

# Tokenization options
# src_subword_model: source.model
# tgt_subword_model: target.model

# Where to save the log file and the output models/checkpoints
log_file: NMT_en_kin/data/logs/onmt/en_kin_model_brnn.log
save_model: NMT_en_kin/models/onmt/en_kin_model_brnn/en_kin_model

# Stop training if it does not imporve after n validations
early_stopping: 4

# Default: 5000 - Save a model checkpoint for each n
save_checkpoint_steps: 1000

# To save space, limit checkpoints to last n
# keep_checkpoint: 3

seed: 3435

# Default: 100000 - Train the model to max n steps 
# Increase to 200000 or more for large datasets
# For fine-tuning, add up the required steps to the original steps
train_steps: 20000

# Default: 10000 - Run validation after n steps
valid_steps: 1000

# Default: 4000 - for large datasets, try up to 8000
warmup_steps: 1000
report_every: 100

# Number of GPUs, and IDs of GPUs
world_size: 1
gpu_ranks: [0, 1]

# Batching
bucket_size: 262144
num_workers: 0  # Default: 2, set to 0 when RAM out of memory
batch_type: "tokens"
batch_size: 4096   # Tokens per batch, change when CUDA out of memory
valid_batch_size: 2048
max_generator_batches: 2
accum_count: [4]
accum_steps: [0]

optim: adagrad
learning_rate: 0.15
adagrad_accumulator_init: 0.1
max_grad_norm: 2

dropout: 0.0
copy_attn: 'true'
global_attention: mlp